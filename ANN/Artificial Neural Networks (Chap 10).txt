==================================================================================

# Fashion MNIST classification using sequential API


--- Using Keras to load the dataset ---

from tensorflow import keras
fashion_mnist = keras.datasets.fashion_mnist
(X_train_full, y_train_full), (X_test, y_test) = fashion_mnist.load_data()

print(X_train_full.shape)
print(X_train_full.dtype)


--- Create a validation set & standarization ---

X_valid, X_train = X_train_full[:5000] / 255.0, X_train_full[5000:] / 255.0
y_valid, y_train = y_train_full[:5000], y_train_full[5000:]
X_test = X_test / 255.0


--- Create a list of class names & plot image ---

import numpy as np
class_names = ["T-shirt/top", "Trouser", "Pullover", "Dress", "Coat",
"Sandal", "Shirt", "Sneaker", "Bag", "Ankle boot"]
print(np.array(class_names)[0:10])


--- Plot image ---

import matplotlib.pyplot as plt
some_cloth=X_train[0]
some_cloth_image=some_cloth.reshape(28,28)
plt.imshow(some_cloth_image,cmap="binary")
plt.axis("off")
plt.show()


--- Creating the model using the Sequential API ---

model = keras.models.Sequential([
  keras.layers.Flatten(input_shape=[28,28]),
  keras.layers.Dense(300, activation="relu"),
  keras.layers.Dense(100, activation="relu"),
  keras.layers.Dense(10, activation="softmax")
])


--- Display model information ---

model.summary()

model.layers

hidden1 = model.layers[1]
weights, biases = hidden1.get_weights()


--- Compiling the model ---

model.compile(loss="sparse_categorical_crossentropy",
optimizer="sgd",metrics=["accuracy"])


--- Training and evaluating the model ---

history = model.fit(X_train, y_train, epochs=30, validation_data=(X_valid, y_valid))


--- Learning curves ---

import pandas as pd
import matplotlib.pyplot as plt
pd.DataFrame(history.history).plot(figsize=(8, 5))
plt.grid(True)
plt.gca().set_ylim(0, 1) # set the vertical range to [0-1]
plt.show()


--- Model evaluation by test set ---

model.evaluate(X_test, y_test)


--- Using the model to make predictions ---

X_new = X_test[:3]
y_proba = model.predict(X_new)
y_proba.round(2)

y_test_proba=model.predict(X_test)
y_test_pred = np.argmax(y_test_proba, axis=1)
print(y_test_pred)
from sklearn.metrics import accuracy_score
print(np.array(class_names)[y_test_pred])

print("Test set score: %f" % accuracy_score(y_test,y_test_pred))



==================================================================================

# Regression MLP using sequential API

--- Loading the housing dataset from scikit-learn ---

from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

housing = fetch_california_housing()


--- Splitting data into training and test data ---

X_train_full, X_test, y_train_full, y_test = train_test_split(
housing.data, housing.target, test_size=0.2)
X_train, X_valid, y_train, y_valid = train_test_split(
X_train_full, y_train_full, test_size=0.2)


--- Standardizing the features ---

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_valid = scaler.transform(X_valid)
X_test = scaler.transform(X_test)


--- Build a regression model ---

from tensorflow import keras
model = keras.models.Sequential([
  keras.layers.Dense(30, activation="relu", input_shape=X_train.shape[1:]),
  keras.layers.Dense(1)
])
model.compile(loss="mean_squared_error", optimizer="sgd")


--- Model training and testing ---

history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))
mse_test = model.evaluate(X_test, y_test)

X_new = X_test[:3] # pretend these are new instances
y_pred = model.predict(X_new)