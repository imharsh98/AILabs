===============  Generative Adversarial Network on Fashion MNIST ===============

## Using Keras to load the dataset

from tensorflow import keras
fashion_mnist = keras.datasets.fashion_mnist
(X_train_full, y_train_full), (X_test, y_test) = fashion_mnist.load_data()


## Create a validation set

X_valid, X_train = X_train_full[:5000]/255, X_train_full[5000:]/255



## Build a GAN

codings_size = 30
generator = keras.models.Sequential([
    keras.layers.Dense(100, activation="selu", input_shape=[codings_size]),
    keras.layers.Dense(150, activation="selu"),
    keras.layers.Dense(28 * 28, activation="sigmoid"),
    keras.layers.Reshape([28, 28])
])


discriminator = keras.models.Sequential([
    keras.layers.Flatten(input_shape=[28, 28]),
    keras.layers.Dense(150, activation="selu"),
    keras.layers.Dense(100, activation="selu"),
    keras.layers.Dense(1, activation="sigmoid")
])

gan = keras.models.Sequential([generator, discriminator])



## Compile the GAN

discriminator.compile(loss="binary_crossentropy", optimizer="rmsprop")
discriminator.trainable = False
gan.compile(loss="binary_crossentropy", optimizer="rmsprop")



## Create a Dataset to iterate through the images

import tensorflow as tf
batch_size = 32

### every slicing from X_train with shuffled 1000 samples to save RAM
dataset = tf.data.Dataset.from_tensor_slices(X_train).shuffle(1000)

### set batch of each slice
dataset = dataset.batch(batch_size, drop_remainder=True).prefetch(1)


## Visualize the images

import matplotlib.pyplot as plt

def plot_image(image):
   plt.imshow(image, cmap="binary")
   plt.axis("off")

def show_images(X, n_images=10):
   fig = plt.figure(figsize=(n_images * 1.5, 3))
   for image_index in range(n_images):
      plt.subplot(1, n_images, 1 + image_index)
      plot_image(X[image_index])


## Train the GAN

def train_gan(gan, dataset, batch_size, codings_size, n_epochs=10):

   generator, discriminator = gan.layers

   for epoch in range(n_epochs):

      for X_batch in dataset:

        # phase 1 - training the discriminator
        noise = tf.random.normal(shape=[batch_size, codings_size])
        generated_images = generator(noise)
        X_batch = tf.cast(X_batch, tf.float32)
        X_fake_and_real = tf.concat([generated_images, X_batch], axis=0)
        y1 = tf.constant([[0.]] * batch_size + [[1.]] * batch_size)
        discriminator.trainable = True
        discriminator.train_on_batch(X_fake_and_real, y1)

        # phase 2 - training the generator
        noise = tf.random.normal(shape=[batch_size, codings_size])
        y2 = tf.constant([[1.]] * batch_size)
        discriminator.trainable = False
        gan.train_on_batch(noise, y2)

      show_images(generated_images, n_images=10)
      plt.show()

train_gan(gan, dataset, batch_size, codings_size)



===============  Deep Convolutional GAN ===============

## Using Keras to load the dataset

from tensorflow import keras
fashion_mnist = keras.datasets.fashion_mnist
(X_train_full, y_train_full), (X_test, y_test) = fashion_mnist.load_data()


## Create a validation set

X_valid, X_train = X_train_full[:5000]/255, X_train_full[5000:]/255## Using Keras to load the dataset



## Build a deep convolutional GAN

codings_size = 100
generator = keras.models.Sequential([
    keras.layers.Dense(7 * 7 * 128, input_shape=[codings_size]),
    keras.layers.Reshape([7, 7, 128]),
    keras.layers.BatchNormalization(),
    keras.layers.Conv2DTranspose(64, kernel_size=5, strides=2, padding="same", activation="selu"),
    keras.layers.BatchNormalization(),
    keras.layers.Conv2DTranspose(1, kernel_size=5, strides=2, padding="same", activation="tanh")
])

discriminator = keras.models.Sequential([
   keras.layers.Conv2D(64, kernel_size=5, strides=2, padding="same", activation=keras.layers.LeakyReLU(0.2), input_shape=[28, 28, 1]),
   keras.layers.Dropout(0.4),
   keras.layers.Conv2D(128, kernel_size=5, strides=2, padding="same", activation=keras.layers.LeakyReLU(0.2)),
   keras.layers.Dropout(0.4),
   keras.layers.Flatten(),
   keras.layers.Dense(1, activation="sigmoid")
])


gan = keras.models.Sequential([generator, discriminator])


## Compile the GAN

discriminator.compile(loss="binary_crossentropy", optimizer="rmsprop")
discriminator.trainable = False
gan.compile(loss="binary_crossentropy", optimizer="rmsprop")


# reshape and rescale X_train

print(X_train.shape)
X_train = X_train.reshape(-1, 28, 28, 1) * 2. - 1.
print(X_train.shape) 


## Create a Dataset to iterate through the images

import tensorflow as tf
batch_size = 32

### every slicing from X_train with shuffled 1000 samples to save RAM
dataset = tf.data.Dataset.from_tensor_slices(X_train).shuffle(1000)

### set batch of each slice
dataset = dataset.batch(batch_size, drop_remainder=True).prefetch(1)


## Visualize the images

import matplotlib.pyplot as plt

def plot_image(image):
   plt.imshow(image, cmap="binary")
   plt.axis("off")

def show_images(X, n_images=10):
   fig = plt.figure(figsize=(n_images * 1.5, 3))
   for image_index in range(n_images):
      plt.subplot(1, n_images, 1 + image_index)
      plot_image(X[image_index])


## Train the GAN

import numpy as np

def train_gan(gan, dataset, batch_size, codings_size, n_epochs=10):

   generator, discriminator = gan.layers

   for epoch in range(n_epochs):

      for X_batch in dataset:

        # phase 1 - training the discriminator
        noise = tf.random.normal(shape=[batch_size, codings_size])
        generated_images = generator(noise)
        X_batch = tf.cast(X_batch, tf.float32)
        X_fake_and_real = tf.concat([generated_images, X_batch], axis=0)
        y1 = tf.constant([[0.]] * batch_size + [[1.]] * batch_size)
        discriminator.trainable = True
        discriminator.train_on_batch(X_fake_and_real, y1)

        # phase 2 - training the generator
        noise = tf.random.normal(shape=[batch_size, codings_size])
        y2 = tf.constant([[1.]] * batch_size)
        discriminator.trainable = False
        gan.train_on_batch(noise, y2)

      images = generated_images.numpy()
      print(images.shape)
      images = np.squeeze(images,axis=3)
      print(images.shape)
      show_images(images, n_images=10)
      plt.show()


train_gan(gan, dataset, batch_size, codings_size)

