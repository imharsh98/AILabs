===============  Forcasting a time series ===============

## generate time series

import numpy as np

def generate_time_series(batch_size, n_steps):
  freq1, freq2, offsets1, offsets2 = np.random.rand(4, batch_size, 1)
  time = np.linspace(0, 1, n_steps)
  series = 0.5 * np.sin((time - offsets1) * (freq1 * 10 + 10)) # wave 1
  series += 0.2 * np.sin((time - offsets2) * (freq2 * 20 + 20)) # + wave 2
  series += 0.1 * (np.random.rand(batch_size, n_steps) - 0.5) # + noise
  return series[..., np.newaxis].astype(np.float32)

n_steps = 50
series = generate_time_series(10000, n_steps + 1)
print(series.shape)
X_train, y_train = series[:7000, :n_steps], series[:7000, -1]
X_valid, y_valid = series[7000:9000, :n_steps], series[7000:9000, -1]
X_test, y_test = series[9000:, :n_steps], series[9000:, -1]


------------------------------------------------

## Define a deep RNN model

from tensorflow import keras
model = keras.models.Sequential([
  keras.layers.Flatten(input_shape=[50, 1]),
  keras.layers.Dense(1)
])
model.summary()


------------------------------------------------

## Compiling model

def last_time_step_mse(Y_true, Y_pred):
  return keras.metrics.mean_squared_error(Y_true[:, -1], Y_pred[:, -1])

optimizer = keras.optimizers.Adam(learning_rate=0.01)
model.compile(loss="mse", optimizer=optimizer, metrics=[last_time_step_mse])


## Training

model.fit(X_train, y_train, epochs = 10)


------------------------------------------------


# MSE in train set

y_train_pred = model.predict(X_train)
train_mse = last_time_step_mse(y_train, y_train_pred)
print('Train set MSE', train_mse.numpy())


# MSE in validate set 

y_valid_pred = model.predict(X_valid)
valid_mse = last_time_step_mse(y_valid, y_valid_pred)
print('Validate set MSE', valid_mse.numpy())


## Plot time series

import matplotlib.pyplot as plt
print(X_valid.shape)
print(y_valid.shape)
X = np.concatenate([X_valid, y_valid[:, :, np.newaxis]], axis=1)
plt.plot(np.arange(0,n_steps+1),X[0,:], 'b')
plt.plot(np.arange(n_steps,n_steps+1),y_valid_pred[0,0], 'rx')



===============  Define RNN models ===============

from tensorflow import keras


## Define a simple RNN

model = keras.models.Sequential([
  keras.layers.SimpleRNN(1, input_shape=[None, 1])
])
model.summary()


## Define a deep RNN

model = keras.models.Sequential([
  keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
  keras.layers.SimpleRNN(20, return_sequences=True),
  keras.layers.SimpleRNN(1)
])
model.summary()


## Define another deep RNN

model = keras.models.Sequential([
  keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
  keras.layers.SimpleRNN(20),
  keras.layers.Dense(1)
])
model.summary()



===============  Forecasting several time steps ahead ===============

## generate time series

import numpy as np

def generate_time_series(batch_size, n_steps):
  freq1, freq2, offsets1, offsets2 = np.random.rand(4, batch_size,1)
  time = np.linspace(0, 1, n_steps)
  series = 0.5 * np.sin((time - offsets1) * (freq1 * 10 + 10)) # wave 1
  series += 0.2 * np.sin((time - offsets2) * (freq2 * 20 + 20)) # + wave 2
  series += 0.1 * (np.random.rand(batch_size, n_steps) - 0.5) # + noise
  return series[..., np.newaxis].astype(np.float32)

n_steps = 50
series = generate_time_series(10000, n_steps + 10)
X_train, y_train = series[:7000, :n_steps], series[:7000, -10:, 0]
X_valid, y_valid = series[7000:9000, :n_steps], series[7000:9000, -10:, 0]
X_test, y_test = series[9000:, :n_steps], series[9000:, -10:, 0]


------------------------------------------------

## Build a linear regression model

from tensorflow import keras

model = keras.models.Sequential([
   keras.layers.Flatten(input_shape=[50, 1]),
   keras.layers.Dense(10)
])
model.summary()


------------------------------------------------

## Build a deep RNN model

from tensorflow import keras

model = keras.models.Sequential([
  keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]),
  keras.layers.SimpleRNN(20),
  keras.layers.Dense(10)
])
model.summary()


------------------------------------------------

## Compiling model
def last_time_step_mse(Y_true, Y_pred):
  return keras.metrics.mean_squared_error(Y_true[:,-1], Y_pred[:,-1])

optimizer = keras.optimizers.Adam(learning_rate=0.01)
model.compile(loss="mse", optimizer=optimizer, metrics=[last_time_step_mse])


------------------------------------------------

## Training

model.fit(X_train, y_train, epochs = 20)


------------------------------------------------

# MSE in train set
y_train_pred = model.predict(X_train)
train_mse = last_time_step_mse(y_train, y_train_pred)
print('Train set MSE', train_mse.numpy())

# MSE in validate set 
y_valid_pred = model.predict(X_valid)
valid_mse = last_time_step_mse(y_valid, y_valid_pred)
print('Validate set MSE', valid_mse.numpy())


## Plot time series
import matplotlib.pyplot as plt
print(X_valid.shape)
print(y_valid.shape)
X = np.concatenate([X_valid, y_valid[:, :, np.newaxis]], axis=1)
plt.plot(np.arange(0,n_steps+10),X[0,:], 'b')
plt.plot(np.arange(n_steps,n_steps+10),y_valid_pred[0,:], 'rx')



===============  Forecasting several time steps ahead by LSTM ===============

## generate time series

import numpy as np

def generate_time_series(batch_size, n_steps):
  freq1, freq2, offsets1, offsets2 = np.random.rand(4, batch_size,1)
  time = np.linspace(0, 1, n_steps)
  series = 0.5 * np.sin((time - offsets1) * (freq1 * 10 + 10)) # wave 1
  series += 0.2 * np.sin((time - offsets2) * (freq2 * 20 + 20)) # + wave 2
  series += 0.1 * (np.random.rand(batch_size, n_steps) - 0.5) # + noise
  return series[..., np.newaxis].astype(np.float32)

n_steps = 50
series = generate_time_series(10000, n_steps + 10)
X_train = series[:7000, :n_steps]
X_valid = series[7000:9000, :n_steps]
X_test = series[9000:, :n_steps]

Y = np.empty((10000, n_steps, 10)) # each target is a sequence of 10D vectors
for step_ahead in range(1, 10 + 1):
  Y[:, :, step_ahead - 1] = series[:, step_ahead:step_ahead + n_steps, 0]
y_train = Y[:7000]
y_valid = Y[7000:9000]
y_test = Y[9000:]


------------------------------------------------

## Define a LSTM

from tensorflow import keras

model = keras.models.Sequential([
  keras.layers.LSTM(20, return_sequences=True, input_shape=[None, 1]),
  keras.layers.LSTM(20, return_sequences=True),
  keras.layers.TimeDistributed(keras.layers.Dense(10))
])
model.summary()


------------------------------------------------

## Define another LSTM

model = keras.models.Sequential([
  keras.layers.RNN(keras.layers.LSTMCell(20), return_sequences=True,
  input_shape=[None, 1]),
  keras.layers.RNN(keras.layers.LSTMCell(20), return_sequences=True),
  keras.layers.TimeDistributed(keras.layers.Dense(10))
])
model.summary()


------------------------------------------------

## Compiling model
def last_time_step_mse(Y_true, Y_pred):
  return keras.metrics.mean_squared_error(Y_true[:,-1], Y_pred[:,-1])

optimizer = keras.optimizers.Adam(learning_rate=0.01)
model.compile(loss="mse", optimizer=optimizer, metrics=[last_time_step_mse])


------------------------------------------------

## Training

model.fit(X_train, y_train, epochs = 20)


------------------------------------------------

# MSE in train set
y_train_pred = model.predict(X_train)
train_mse = last_time_step_mse(y_train, y_train_pred)
print('Train set MSE', train_mse)

# MSE in validate set 
y_valid_pred = model.predict(X_valid)
valid_mse = last_time_step_mse(y_valid, y_valid_pred)
print('Validate set MSE', valid_mse)


## Plot time series
import matplotlib.pyplot as plt
print(X_valid.shape)
print(y_valid.shape)
plt.plot(np.arange(0,n_steps),X_valid[0,:], 'b')
plt.plot(np.arange(n_steps,n_steps+10),y_valid[0,-1,:], 'b')
plt.plot(np.arange(n_steps,n_steps+10),y_valid_pred[0,-1,:], 'rx')



===============  Forecasting a time series by LSTM ===============

## generate time series

import numpy as np

def generate_time_series(batch_size, n_steps):
  freq1, freq2, offsets1, offsets2 = np.random.rand(4, batch_size,1)
  time = np.linspace(0, 1, n_steps)
  series = 0.5 * np.sin((time - offsets1) * (freq1 * 10 + 10)) # wave 1
  series += 0.2 * np.sin((time - offsets2) * (freq2 * 20 + 20)) # + wave 2
  series += 0.1 * (np.random.rand(batch_size, n_steps) - 0.5) # + noise
  return series[..., np.newaxis].astype(np.float32)

n_steps = 50
series = generate_time_series(10000, n_steps + 1)
X_train = series[:7000, :n_steps]
X_valid = series[7000:9000, :n_steps]
X_test = series[9000:, :n_steps]

Y = np.empty((10000, n_steps, 1)) # each target is a sequence of 1-D vector
Y[:, :, 0] = series[:, 0:n_steps, 0]
y_train = Y[:7000]
y_valid = Y[7000:9000]
y_test = Y[9000:]


------------------------------------------------

## Define a LSTM

from tensorflow import keras

model = keras.models.Sequential([
  keras.layers.LSTM(20, return_sequences=True, input_shape=[None, 1]),
  keras.layers.LSTM(20, return_sequences=True),
  keras.layers.TimeDistributed(keras.layers.Dense(1))
])
model.summary()


------------------------------------------------

## Define another LSTM

model = keras.models.Sequential([
  keras.layers.RNN(keras.layers.LSTMCell(20), return_sequences=True,
  input_shape=[None, 1]),
  keras.layers.RNN(keras.layers.LSTMCell(20), return_sequences=True),
  keras.layers.TimeDistributed(keras.layers.Dense(1))
])
model.summary()


------------------------------------------------

## Compiling model
def last_time_step_mse(Y_true, Y_pred):
  return keras.metrics.mean_squared_error(Y_true[:,-1], Y_pred[:,-1])

optimizer = keras.optimizers.Adam(learning_rate=0.01)
model.compile(loss="mse", optimizer=optimizer, metrics=[last_time_step_mse])


------------------------------------------------

## Training

model.fit(X_train, y_train, epochs = 20)


------------------------------------------------

# MSE in train set
y_train_pred = model.predict(X_train)
train_mse = last_time_step_mse(y_train, y_train_pred)
print('Train set MSE', train_mse)

# MSE in validate set 
y_valid_pred = model.predict(X_valid)
valid_mse = last_time_step_mse(y_valid, y_valid_pred)
print('Validate set MSE', valid_mse)


## Plot time series
import matplotlib.pyplot as plt
print(X_valid.shape)
print(y_valid.shape)
plt.plot(np.arange(0,n_steps),X_valid[0,:], 'b')
plt.plot(np.arange(n_steps,n_steps+1),y_valid[0,-1,:], 'b')
plt.plot(np.arange(n_steps,n_steps+1),y_valid_pred[0,-1,:], 'rx')



===============  Forecasting several time steps ahead by GRU ===============

## generate time series

import numpy as np

def generate_time_series(batch_size, n_steps):
  freq1, freq2, offsets1, offsets2 = np.random.rand(4, batch_size,1)
  time = np.linspace(0, 1, n_steps)
  series = 0.5 * np.sin((time - offsets1) * (freq1 * 10 + 10)) # wave 1
  series += 0.2 * np.sin((time - offsets2) * (freq2 * 20 + 20)) # + wave 2
  series += 0.1 * (np.random.rand(batch_size, n_steps) - 0.5) # + noise
  return series[..., np.newaxis].astype(np.float32)

n_steps = 50
series = generate_time_series(10000, n_steps + 10)
X_train = series[:7000, :n_steps]
X_valid = series[7000:9000, :n_steps]
X_test = series[9000:, :n_steps]

Y = np.empty((10000, n_steps, 10)) # each target is a sequence of 10D vectors
for step_ahead in range(1, 10 + 1):
  Y[:, :, step_ahead - 1] = series[:, step_ahead:step_ahead + n_steps, 0]
y_train = Y[:7000]
y_valid = Y[7000:9000]
y_test = Y[9000:]


------------------------------------------------

## Define a GRU

from tensorflow import keras

model = keras.models.Sequential([
  keras.layers.Conv1D(filters=20, kernel_size=4, strides=2, padding="valid", input_shape=[None, 1]),
  keras.layers.GRU(20, return_sequences=True),
  keras.layers.GRU(20, return_sequences=True),
  keras.layers.TimeDistributed(keras.layers.Dense(10))
])
model.summary()


------------------------------------------------

## Compiling model
def last_time_step_mse(Y_true, Y_pred):
  return keras.metrics.mean_squared_error(Y_true[:,-1], Y_pred[:,-1])

optimizer = keras.optimizers.Adam(learning_rate=0.01)
model.compile(loss="mse", optimizer=optimizer, metrics=[last_time_step_mse])


------------------------------------------------

## Training

history = model.fit(X_train, y_train[:, 3::2, :], epochs=20, validation_data=(X_valid, y_valid[:, 3::2, :]))


------------------------------------------------

## Learning curves

import pandas as pd
import matplotlib.pyplot as plt
pd.DataFrame(history.history).plot(figsize=(8, 5))
plt.grid(True)
# plt.gca().set_ylim(0, 1) # set the vertical range to [0-1]
plt.show()


------------------------------------------------


# MSE in train set
y_train_pred = model.predict(X_train)
train_mse = last_time_step_mse(y_train[:,3::2,:], y_train_pred)
print('Train set MSE', train_mse)

# MSE in validate set 
y_valid_pred = model.predict(X_valid)
valid_mse = last_time_step_mse(y_valid[:,3::2,:], y_valid_pred)
print('Validate set MSE', valid_mse)


## Plot time series
import matplotlib.pyplot as plt
print(X_valid.shape)
print(y_valid.shape)
plt.plot(np.arange(0,n_steps),X_valid[0,:], 'b')
plt.plot(np.arange(n_steps,n_steps+10),y_valid[0,-1,:], 'b')
plt.plot(np.arange(n_steps,n_steps+10),y_valid_pred[0,-1,:], 'rx')
